Exercise 2: E-commerce Platform Search Function

1) Explain Big O notation and how it helps in analyzing algorithms.

Big O notation is a theoretical concept used to understand the time/space complexity of an algorithm in terms of its input size n. 
It helps to calculate how the algorithm's performance for larger inputs.

It expresses the worst-case scenario of an algorithm
O(1): Constant time – independent of input size.

O(n): Linear time – performance grows proportionally with input (e.g., linear search).

O(log n): Logarithmic time – very efficient for large inputs (e.g., binary search,merge sort).

O(n^2): Quadratic time – common in nested loops (e.g., bubble sort).
etc..

Why is it important?

As it allows comparison b/w different algorithms to find which algo is efficiently solving our problem based on the hardware we have.
we can choose b/w the algos depending on out hardware/ requirements
let us take situation where you need to solve a problem which have 2 ways
1st way is O(N) with some extra space
2nd way is O(N^2) and doesn't use any extra space

if we are concerned with only the time complexity and we have good amount of space to use we can go with the 1st solution
if we are concerned with space complexity and we need solve the problem in space then we can go with the 2nd solution

this is how it helps us to decide based on our requirements.


2) Describe the best, average, and worst-case scenarios for search operations.

Case	                     Linear Search	                        Binary Search (on sorted data only)
Best Case	                 O(1) – Target is at the first index	O(1) – Target is the middle element
Average Case	             O(n/2) ≈ O(n)	                        O(log n)
Worst Case	                 O(n) – Target at end or not present	O(log n) – Target at edge or not present

Linear Search-Use cases:
The array is unsorted.
When we have a small dataset.

Binary Search-Use Cases:
The array is already sorted.
When we have Larger sorted datasets.

3) Compare the time complexity of linear and binary search algorithms & Discuss which algorithm is more suitable for your platform and why.

N (Input Size)	        Linear Search (O(N))	Binary Search (O(log₂N))
10	                      10 steps              3 steps
100(10^2)                 100 steps             7 steps
1000(10^3)                1000 steps            10 steps
10000(10^4)               10000 steps           14 steps
100000(10^5)              100000 steps          17 steps
1000000(10^6)             1000000 steps         20 steps

we can see the drastic difference when N= 10^6 B.S is taking comparatively very very less time than L.s
so for this platform search application Binary search is more preferrable than Linear Search.